

[
  
  
    
    
      {
        "title": "Optimizing Kubernetes - Unveiling Solutions to the 'Cold-Start",
        "excerpt": "In the intricate world of containerized applications, the persistent challenge of the “cold-start” problem has spurred innovative minds to delve deep into the heart of Kubernetes clusters. This blog unveils the journey of a dedicated engineer who, with a keen focus on latency issues, has not only identified but significantly alleviated performance bottlenecks within Kubernetes environments.\n\n",
        "content": "In the intricate world of containerized applications, the persistent challenge of the “cold-start” problem has spurred innovative minds to delve deep into the heart of Kubernetes clusters. This blog unveils the journey of a dedicated engineer who, with a keen focus on latency issues, has not only identified but significantly alleviated performance bottlenecks within Kubernetes environments.\n\n\n\n\n  Decoding the ‘Cold-Start’ Challenge\n\n\nThe first chapter of this narrative revolves around addressing the notorious “cold-start” problem that plagues containerized applications. Through meticulous analysis of latency issues within Kubernetes clusters, our intrepid engineer identified key pain points and embarked on a mission to revolutionize performance.\n\n\n  The Art of Optimization: Container Preload, Caching, and Eviction\n\n\nA pivotal moment in this journey was the groundbreaking achievement of vastly improved performance through the optimization of container preload, caching, and eviction. By fine-tuning these elements based on the specific request patterns of machine learning applications, our engineer paved the way for a more responsive and efficient Kubernetes ecosystem.\n\n\n  Innovation Unleashed: K3s Kubernetes Application Framework\n\n\nThe narrative unfolds further with the development of a K3s Kubernetes-based application framework designed specifically to address the unique challenges posed by mobile edge computing environments. This innovative framework not only hosts a diverse array of machine learning applications but also hones in on predicting client mobility while simultaneously optimizing container latency.\n\n\n  A Triumph on the K8s Stage: Boosting Performance to 60%\n\n\nThe climax of this story takes place on a 3-node Kubernetes (K8s) cluster, where our engineer demonstrated unparalleled success. By hosting machine learning applications with an impressive 20 replicas each, the performance soared to a remarkable 60%. This feat not only surpassed expectations but outshone traditional cloud platforms, marking a significant milestone in the ongoing battle against latency in machine learning applications.\n\nAs we conclude this journey into the intricacies of Kubernetes optimization for machine learning, it becomes evident that our dedicated engineer’s innovative solutions have far-reaching implications. The quest to conquer the “cold-start” problem has not only enhanced the performance of containerized applications but has also paved the way for future advancements in the dynamic landscape of Kubernetes and machine learning.\n\nIn the ever-evolving realm of technology, where challenges breed innovation, this blog serves as a testament to the relentless pursuit of excellence. Our engineer’s journey from analyzing latency issues to optimizing container behaviors reflects the spirit of progress that defines the Kubernetes ecosystem, promising a brighter and more efficient future for containerized applications in the world of machine learning.\n\n",
        "url": "/research/professional%20project/2016/08/27/example-post-one/"
      },
    
      {
        "title": "My journey from Java to Python",
        "excerpt": "In the fast-paced realm of software engineering, adaptability and versatility are key. Meet a results-driven Software Engineer with a diverse background spanning Finance, Product, and Agriculture domains. Armed with ~6 years of industry experience and a Master’s degree in Computer Science Engineering with a specialization in Data Science, this engineer has navigated through various roles, demonstrating expertise in both individual contributor and managerial capacities.\n\n",
        "content": "In the fast-paced realm of software engineering, adaptability and versatility are key. Meet a results-driven Software Engineer with a diverse background spanning Finance, Product, and Agriculture domains. Armed with ~6 years of industry experience and a Master’s degree in Computer Science Engineering with a specialization in Data Science, this engineer has navigated through various roles, demonstrating expertise in both individual contributor and managerial capacities.\n\n\n\n  Tech Odyssey: From Java to Python\n\n\nThis journey begins with a robust foundation in Java, honed during an enriching tenure at IBM, Inc. The engineer delved into the intricacies of enterprise-level applications, mastering standard programming practices, and embracing test-driven development (TDD) with Java as the backend. This experience laid the groundwork for a career marked by a commitment to excellence.\n\nAs the tech landscape evolved, so did the engineer’s toolkit. A pivotal point in the journey was the role as a Software Engineer at Syngenta, Inc., where the focus shifted to agriculture technology. Here, the engineer crafted a recommendation system for Syngenta’s patent on the Runoff and Leaching Algorithm. Using Python, Flask, Java, and AWS cloud services, they built REST APIs and processed data for millions of farmlands, contributing to a 12% improvement in business investment in Europe.\n\n\n  Versatility in the Clouds\n\n\nThe transition from Java to Python was seamless, evident in the Data Engineer Summer Internship at Robert Bosch, LLC. Here, the engineer orchestrated a Databricks cloud batch job, efficiently processing a million records in 24 hours. The scalable ETL pipeline, crafted in Python, Azure, Spark, and Databricks, showcased the engineer’s adaptability across diverse tech stacks.\n\n\n  Agile Innovations: Python, Django, and Beyond\n\n\nThe narrative unfolds further at Capco Technologies, Inc., where the engineer played a pivotal role in building a Travel Portal Application using Python, Django, and Java. The application streamlined travel plan approvals, significantly reducing latency. The tech stack expanded to encompass Python, Django, Java, MySQL, RESTful APIs, and Microservices, showcasing a versatile skill set.\n\n\n  Python as a Catalyst for Machine Learning\n\n\nThe final leg of the journey brings us to the academic realm, where the engineer, pursuing a Master’s degree at San Jose State University, delved into the world of Python for Machine Learning. Crafting a bot detection system with a random forest regression model, Python became the catalyst for real-time bid detection on auctioning sites, achieving an impressive prediction accuracy of 96%.\n\n\n  A Comprehensive Toolkit: Python, Java, and Beyond\n\n\nIn essence, the journey from Java to Python for this Software Engineer exemplifies a commitment to continuous learning and adaptability. From building enterprise-level applications in Java to orchestrating scalable ETL pipelines in Python, the engineer’s toolkit is comprehensive. Python, Java, Flask, Django, and a myriad of other technologies harmoniously coexist, creating a symphony of expertise that spans domains and enriches the tech landscape.\n\nAs this seasoned Software Engineer actively seeks new opportunities, the journey from Java to Python stands as a testament to the ever-evolving nature of the tech industry and the engineer’s ability to navigate and thrive in this dynamic landscape.\n",
        "url": "/history/professional%20experience/2016/08/28/example-post-two/"
      },
    
      {
        "title": "Story of brutal code refactoring",
        "excerpt": "In the dynamic realm of backend development, where the heartbeat of a system is measured in lines of code, there exists the occasional need for a revolutionary overhaul. This is the story of a relentless pursuit of excellence, a journey of agile code refactoring within the Python and Java tech stack.\n",
        "content": "In the dynamic realm of backend development, where the heartbeat of a system is measured in lines of code, there exists the occasional need for a revolutionary overhaul. This is the story of a relentless pursuit of excellence, a journey of agile code refactoring within the Python and Java tech stack.\n\nNestled within the digital corridors of a tech company, a once-efficient module had succumbed to the weight of evolving requirements and hurried fixes, transforming into a tangled web of complexity. Bugs lingered like ghosts of past implementations, demanding a radical transformation. It was against this backdrop that the engineer embarked on a mission to redefine the architecture.\n\nWith an astute understanding of the Python and Java tech stack, the engineer delved into the task of ruthless code refactoring, employing various techniques to reshape the codebase.\n\n\n  Extract Method:\nLike a surgeon separating conjoined code, the engineer used the Extract Method technique to break down complex functions into smaller, more manageable units. This not only enhanced readability but also facilitated easier debugging.\n  Introduce Design Patterns:\nDrawing inspiration from the vast repertoire of design patterns, the engineer introduced solutions like the Singleton Pattern and Factory Pattern to streamline the architecture. These patterns acted as building blocks, fostering a more cohesive and modular structure.\n  Replace Conditional with Polymorphism:\nIn instances where conditional statements had proliferated like weeds, the engineer leveraged polymorphism to replace complex conditionals with a more elegant and extensible structure. This not only simplified the code but also paved the way for future enhancements.\n  Refine Variable Names and Comments:\nLike a wordsmith perfecting a poem, the engineer combed through the code, refining variable names and updating comments. This not only improved code readability but also served as documentation for future developers navigating the system.\n  Implement Unit Tests:\nWith the commitment to fortify the system against future challenges, the engineer introduced a suite of unit tests using frameworks like JUnit in Java and pytest in Python. These tests became guardians, ensuring the stability and reliability of the revamped codebase.\n\n\nAs the refactor unfolded, the symphony of agile techniques played out, creating a harmonious balance between functionality and maintainability. The once-muddled module now stood as a testament to the transformative power of agile code refactoring in Python and Java.\n\nWord of the successful refactor reverberated through the development team, inspiring a renewed commitment to agile practices and clean coding. The blog of agile code refactoring became a beacon for developers, illustrating that even the most intricate code could be reshaped into an agile and responsive structure.\n\nAnd so, the symphony of agile code refactoring echoed through the digital corridors, leaving behind a legacy of innovation and efficiency in the ever-evolving landscape of backend development.\n",
        "url": "/general/2016/08/29/example-post-three/"
      },
    
  
    
    
  
  
  
  {
    "title": "Categories",
    "excerpt": "Category index\n",
    "content": "\n",
    "url": "/categories/"
  },
  
  {
    "title": "Projects",
    "excerpt": "A demo of Markdown and HTML includes\n",
    "content": "Heading 1\n\nHeading 2\n\nHeading 3\n\nHeading 4\n\nHeading 5\n\nHeading 6\n\nA small project\n\nA link\n\nLorem ipsum dolor sit amet, consectetur adip* isicing elit, sed do eiusmod *tempor incididunt ut labore et dolore magna aliqua.\n\nDuis aute irure dolor in A link reprehenderit in voluptate velit esse cillum bold text dolore eu fugiat nulla pariatur. Excepteur span element sint occaecat cupidatat non proident, sunt italicised text in culpa qui officia deserunt mollit anim id some code est laborum.\n\n\n  An item\n  An item\n  An item\n  An item\n  An item\n\n\n\n  Item one\n  Item two\n  Item three\n  Item four\n  Item five\n\n\n\n  A simple blockquote\n\n\nSome HTML…\n\n&lt;blockquote cite=\"http://www.imdb.com/title/tt0284978/quotes/qt1375101\"&gt;\n  &lt;p&gt;You planning a vacation, Mr. Sullivan?&lt;/p&gt;\n  &lt;footer&gt;\n    &lt;a href=\"http://www.imdb.com/title/tt0284978/quotes/qt1375101\"&gt;Sunways Security Guard&lt;/a&gt;\n  &lt;/footer&gt;\n&lt;/blockquote&gt;\n\n\n…CSS…\n\nblockquote {\n  text-align: center;\n  font-weight: bold;\n}\nblockquote footer {\n  font-size: .8rem;\n}\n\n\n…and JavaScript\n\nconst blockquote = document.querySelector(\"blockquote\")\nconst bolden = (keyString, string) =&gt;\n  string.replace(new RegExp(keyString, 'g'), '&lt;strong&gt;'+keyString+'&lt;/strong&gt;')\n\nblockquote.innerHTML = bolden(\"Mr. Sullivan\", blockquote.innerHTML)\n\n\nSingle line of code\n\nHTML Includes\n\nContact form\n\n\n  \n    Contact\n    Name: *\n    \n\n    Email Address: *\n    \n\n    Message: *\n    \n\n    \n    \n    * indicates a required field\n\n    \n      \n      \n      \n    \n  \n\n\n\n\nPlease enable JavaScript to use the form.\n\n{% include site-form.html %}\n\n\nDemo map embed\n\n\n\n{% include map.html id=\"XXXXXX\" title=\"Coffee shop map\" %}\n\n\nButton include\n\nA button\n\nA button with icon  twitter\n\n\n{% include button.html text=\"A button\" link=\"https://david.darn.es\" %}\n{% include button.html text=\"A button with icon\" link=\"https://twitter.com/daviddarnes\" icon=\"twitter\" %}\n\n\nIcon include\n\ntwitter\ntwitter\n\n\n{% include icon.html id=\"twitter\" title=\"twitter\" %}\n[{% include icon.html id=\"linkedin\" title=\"twitter\" %}](https://www.linkedin.com/in/sonali-thote)\n\n\nVideo include\n\n\n  \n\n\n{% include video.html id=\"zrkcGL5H3MU\" title=\"Siteleaf tutorial video\" %}\n\n\nImage includes\n\n\n  \n  Image with caption\n\n\n\n  \n  Right aligned image\n\n\n\n  \n  Left aligned image\n\n\n\n  \n  \n\n\n{% include figure.html image=\"https://picsum.photos/600/800?image=894\" caption=\"Image with caption\" width=\"300\" height=\"800\" %}\n\n{% include figure.html image=\"https://picsum.photos/600/800?image=894\" caption=\"Right aligned image\" position=\"right\" width=\"300\" height=\"800\" %}\n\n{% include figure.html image=\"https://picsum.photos/600/800?image=894\" caption=\"Left aligned image\" position=\"left\" width=\"300\" height=\"800\" %}\n\n{% include figure.html image=\"https://picsum.photos/1600/800?image=894\" alt=\"Image with just alt text\" %}\n\n",
    "url": "/elements/"
  },
  
  {
    "title": "About me",
    "excerpt": "Alembic is a starting point for Jekyll projects. Rather than starting from scratch, this boilerplate is designed to get the ball rolling immediately. Install it, configure it, tweak it, push it.\n",
    "content": "I am results-driven Software Engineer with 5+ years of proven industry experience across domains like Finance, Product, and Agriculture domains. Skilled in delivering scalable and highly-available systems. Proficient in both individual contributor and managerial roles for every task and responsibility\n\nI hold Master degree (MS) in Computer Science Engineering with data science specialization from San Jose State University, California.\n\nCurrently actively looking for opportunities in the Bay Area and open to interviews. Resident of San Jose, California.\n\nConnect Catalyst   linkedin\n\n Code Canvas  github\n\n Tweet me  twitter\n\n Install Alembic ⚗️\n\nFeatures\n\n\n  Available as a theme gem and GitHub Pages theme\n  Clear and elegant design that can be used out of the box or as solid starting point\n  Tested in all major browsers, including IE and Edge\n  Built in Service Worker so it can work offline and on slow connections\n  Configurable colours and typography in a single settings file\n  Extensive set of shortcodes to include various elements; such as buttons, icons, figure images and more\n  Solid typographic framework from Sassline\n  Configurable navigation via a single file\n  Modular Jekyll components\n  Post category support in the form of a single post index page grouped by category\n  Built in live search using JavaScript\n  Contact form built in using Formspree\n  Designed with Siteleaf in mind\n  Has 9 of the most popular networks as performant sharing buttons\n  Has documentation\n\n\nExamples\n\nHere are a few examples of Alembic out in the wild being used in a variety of ways:\n\n\n  bawejakunal.github.io\n  case2111.github.io\n  karateca.org\n\n\nInstallation\n\nQuick setup\n\nTo give you a running start I’ve put together some starter kits that you can download, fork or even deploy immediately:\n\n\n  ⚗️🍨 Vanilla Jekyll starter kit\n\n  ⚗️🌲 Forestry starter kit\n\n\n  \n    ⚗️💠 Netlify CMS starter kit\n\n  \n  \n    ⚗️:octocat: GitHub Pages with remote theme kit\nDownload kit\n  \n  ⚗️🚀 Stackbit starter kit\n\n\n\nAs a Jekyll theme\n\n\n  Add gem \"alembic-jekyll-theme\" to your Gemfile to add the theme as a dependancy\n  Run the command bundle install in the root of project to install the theme and its dependancies\n  Add theme: alembic-jekyll-theme to your _config.yml file to set the site theme\n  Run bundle exec jekyll serve to build and serve your site\n  Done! Use the configuration documentation and the example _config.yml file to set things like the navigation, contact form and social sharing buttons\n\n\nAs a GitHub Pages remote theme\n\n\n  Add gem \"jekyll-remote-theme\" to your Gemfile to add the theme as a dependancy\n  Run the command bundle install in the root of project to install the jekyll remote theme gem as a dependancy\n  Add jekyll-remote-theme to the list of plugins in your _config.yml file\n  Add remote_theme: daviddarnes/alembic@main to your _config.yml file to set the site theme\n  Run bundle exec jekyll serve to build and serve your site\n  Done! Use the configuration documentation and the example _config.yml file to set things like the navigation, contact form and social sharing buttons\n\n\nAs a Boilerplate / Fork\n\n(deprecated, not recommended)\n\n\n  Fork the repo\n  Replace the Gemfile with one stating all the gems used in your project\n  Delete the following unnecessary files/folders: .github, LICENSE, screenshot.png, CNAME and alembic-jekyll-theme.gemspec\n  Run the command bundle install in the root of project to install the jekyll remote theme gem as a dependancy\n  Run bundle exec jekyll serve to build and serve your site\n  Done! Use the configuration documentation and the example _config.yml file to set things like the navigation, contact form and social sharing buttons\n\n\nCustomising\n\nWhen using Alembic as a theme means you can take advantage of the file overriding method. This allows you to overwrite any file in this theme with your own custom file, by matching the file name and path. The most common example of this would be if you want to add your own styles or change the core style settings.\n\nTo add your own styles copy the styles.scss into your own project with the same file path (assets/styles.scss). From there you can add your own styles, you can even optionally ignore the theme styles by removing the @import \"alembic\"; line.\n\nIf you’re looking to set your own colours and fonts you can overwrite them by matching the variable names from the _settings.scss file in your own styles.scss, make sure to state them before the @import \"alembic\"; line so they take effect. The settings are a mixture of custom variables and settings from Sassline - follow the link to find out how to configure the typographic settings.\n",
    "url": "/"
  },
  
  {
    "title": "Search",
    "excerpt": "Search for a page or post you’re looking for\n",
    "content": "{% include site-search.html %}\n",
    "url": "/search/"
  }
  
]

